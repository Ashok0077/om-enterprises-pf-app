import React, { useState } from 'react';
import axios from 'axios';
import bcrypt from 'bcryptjs';
import jsPDF from 'jspdf';
import { useNavigate } from 'react-router-dom';
import logo from '../assets/logo.png';

const PFAccountForm = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    name: '',
    dob: '',
    aadhar: '',
    gender: '',
    position: '',
    pfBalance: '',
    password: '',
    phone: '',
    photo: null,
    aadharImage: null,
  });

  const [errors, setErrors] = useState({});
  const [serverError, setServerError] = useState('');
  const [showModal, setShowModal] = useState(false);
  const [createdAccount, setCreatedAccount] = useState(null);

  // Handle changes in the form fields
  const handleChange = (e) => {
    const { name, value, files } = e.target;
    setFormData({ ...formData, [name]: files ? files[0] : value });
  };

  // Validate the form data
  const validate = () => {
    const newErrors = {};
    if (!/^\d{12}$/.test(formData.aadhar)) newErrors.aadhar = 'Aadhar number must be 12 digits.';
    if (!/^\d{4}$/.test(formData.password)) newErrors.password = 'Password must be a 4-digit number.';
    if (!formData.dob || new Date(formData.dob) > new Date()) newErrors.dob = 'Invalid date of birth.';
    if (!/^\d{10}$/.test(formData.phone)) newErrors.phone = 'Phone number must be 10 digits.';
    if (!formData.gender) newErrors.gender = 'Please select gender.';
    if (!formData.photo) newErrors.photo = 'Passport photo is required.';
    if (!formData.aadharImage) newErrors.aadharImage = 'Aadhar image is required.';
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Generate PF number from DOB
  const generatePFNumber = (dob) => {
    const date = new Date(dob);
    const yyyy = date.getFullYear();
    const mm = String(date.getMonth() + 1).padStart(2, '0');
    const dd = String(date.getDate()).padStart(2, '0');
    const random = Math.floor(100000 + Math.random() * 900000);
    return `${yyyy}${mm}${dd}${random}`;
  };

  const imageToBase64 = (file) =>
    new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result);
      reader.onerror = reject;
  
      if (file instanceof Blob) {
        reader.readAsDataURL(file);
      } else {
        reject("File is not a Blob");
      }
    });
  
  // Modify your generatePDF function to check if logo is a URL:
  const generatePDF = async (data) => {
    const doc = new jsPDF();
    try {
      let logoBase64;
      if (logo.startsWith('data:image')) {
        logoBase64 = logo; // If it's already a base64 string
      } else {
        // Convert image URL to base64 if it's not base64 already
        const response = await fetch(logo);
        const blob = await response.blob();
        logoBase64 = await imageToBase64(blob);
      }
      const photoBase64 = data.photo ? await imageToBase64(data.photo) : null;
  
      // Header Section
      doc.setFillColor(22, 160, 133); // Set color for header
      doc.rect(10, 10, 190, 20, 'F'); // Add background color to header
      doc.addImage(logoBase64, 'PNG', 15, 10, 30, 15); // Logo Image
      doc.setFontSize(18);
      doc.setTextColor(255, 255, 255); // White text color
      doc.text('OM ENTERPRISES', 105, 20, null, null, 'center');
      doc.setFontSize(14);
      doc.text('PF Account Slip', 105, 30, null, null, 'center');
  
      // Content Section
      let y = 45;
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0); // Black text color
  
      // Photo Section (if available)
      if (photoBase64) {
        doc.addImage(photoBase64, 'JPEG', 150, 40, 40, 50);
      }
  
      // Data Section with borders and better spacing
      const addText = (label, value) => {
        doc.setFont(undefined, 'bold');
        doc.setTextColor(0, 0, 0); // Black text color for labels
        doc.text(`${label}:`, 20, y);
        doc.setFont(undefined, 'normal');
        doc.setTextColor(0, 0, 0); // Black text color for values
        doc.text(`${value}`, 70, y);
        y += 10;
      };
  
      addText('PF Number', data.pfNumber);
      addText('Name', data.name);
      addText('DOB', data.dob);
      addText('Gender', data.gender);
      addText('Aadhar', data.aadhar);
      addText('Phone', data.phone);
      addText('Position', data.position);
      addText('PF Balance', `₹${data.pfBalance}`);
  
      // Border for data section
      doc.setLineWidth(0.5);
      doc.setDrawColor(0, 0, 0); // Black border
      doc.rect(15, 35, 180, y - 30); // Draw a border around the data
  
      // Footer Section with outline
      doc.setFontSize(10);
      doc.setTextColor(100, 100, 100); // Gray text for footer
      doc.text('Generated by OM ENTERPRISES', 105, y + 10, null, null, 'center');
      doc.setLineWidth(0.5);
      doc.setDrawColor(0, 0, 0);
      doc.rect(10, y + 5, 190, 20); // Add footer box
  
      // Save the document
      doc.save(`PF_Account_${data.name}.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
    }
  };
  
  
  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    setServerError('');
    if (!validate()) return;

    try {
      const hashedPassword = await bcrypt.hash(formData.password, 10);
      const pfNumber = generatePFNumber(formData.dob);

      const payload = new FormData();
      Object.entries(formData).forEach(([key, value]) => {
        if (key === 'pfBalance') {
          payload.append(key, Number(value));
        } else if (key !== 'password') {
          payload.append(key, value);
        }
      });
      payload.append('password', hashedPassword);
      payload.append('pfNumber', pfNumber);

      await axios.post('http://localhost:5000/api/pf-accounts', payload, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });

      const newAccountData = {
        ...formData,
        pfNumber,
      };

      setCreatedAccount(newAccountData);
      setShowModal(true);
      setFormData({
        name: '',
        dob: '',
        aadhar: '',
        gender: '',
        position: '',
        pfBalance: '',
        password: '',
        phone: '',
        photo: null,
        aadharImage: null,
      });
    } catch (error) {
      console.error('Error creating PF account:', error);
      setServerError(error.response?.data?.message || 'Something went wrong. Please try again.');
    }
  };

  return (
    <div className="max-w-2xl mx-auto p-6 bg-white shadow-lg rounded">
      <h2 className="text-2xl font-bold mb-4 text-center text-omred">Create PF Account</h2>

      <form onSubmit={handleSubmit} className="space-y-4">
        {[{ name: 'name', type: 'text' },
          { name: 'dob', type: 'date' },
          { name: 'aadhar', type: 'text' },
          { name: 'position', type: 'text' },
          { name: 'pfBalance', type: 'number' },
          { name: 'password', type: 'password' },
          { name: 'phone', type: 'text' }].map(({ name, type }) => (
          <div key={name}>
            <input
              name={name}
              type={type}
              value={formData[name]}
              onChange={handleChange}
              placeholder={name.toUpperCase()}
              className="w-full border px-3 py-2 rounded"
              required
            />
            {errors[name] && <p className="text-red-600 text-sm">{errors[name]}</p>}
          </div>
        ))}

        <div>
          <select
            name="gender"
            value={formData.gender}
            onChange={handleChange}
            className="w-full border px-3 py-2 rounded"
            required
          >
            <option value="">Select Gender</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
          </select>
          {errors.gender && <p className="text-red-600 text-sm">{errors.gender}</p>}
        </div>

        <div>
          <label className="block mb-1 text-sm font-medium">Passport Size Photo</label>
          <input
            type="file"
            name="photo"
            accept="image/*"
            onChange={handleChange}
            className="w-full"
            required
          />
          {errors.photo && <p className="text-red-600 text-sm">{errors.photo}</p>}
        </div>

        <div>
          <label className="block mb-1 text-sm font-medium">Aadhar Card Image</label>
          <input
            type="file"
            name="aadharImage"
            accept="image/*"
            onChange={handleChange}
            className="w-full"
            required
          />
          {errors.aadharImage && <p className="text-red-600 text-sm">{errors.aadharImage}</p>}
        </div>

        <button
          type="submit"
          className="w-full bg-omred text-white py-2 rounded hover:bg-opacity-90 transition font-semibold"
        >
          Create PF Account
        </button>

        {serverError && (
          <p className="text-red-600 mt-2 text-center font-medium">{serverError}</p>
        )}
      </form>

      {showModal && createdAccount && (
        <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-lg max-w-lg w-full p-6 relative">
            <h3 className="text-xl font-bold text-center mb-4 text-omred">PF Account Created</h3>
            <div className="mb-4 text-sm">
              <p><strong>Company:</strong> OM ENTERPRISES</p>
              <p><strong>Name:</strong> {createdAccount.name}</p>
              <p><strong>DOB:</strong> {createdAccount.dob}</p>
              <p><strong>Aadhar:</strong> {createdAccount.aadhar}</p>
              <p><strong>Gender:</strong> {createdAccount.gender}</p>
              <p><strong>Position:</strong> {createdAccount.position}</p>
              <p><strong>PF Balance:</strong> ₹{createdAccount.pfBalance}</p>
              <p><strong>Phone:</strong> {createdAccount.phone}</p>
              <p><strong>PF Number:</strong> {createdAccount.pfNumber}</p>
            </div>
            <div className="flex justify-between mt-4">
              <button
                className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
                onClick={() => generatePDF(createdAccount)}
              >
                Download Slip
              </button>
              <button
                className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-700"
                onClick={() => setShowModal(false)}
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default PFAccountForm;
